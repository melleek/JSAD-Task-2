var theme = "dark";
let lang = "ru";
const maxNotification = 150;

function updateSettingsSystem(newTheme) {    // function declaration
  theme = newTheme;
  console.log(`Theme update to: ${newTheme}`);
}

const updateLanguage = function (newLang) { // function expression
  lang = newLang;
  console.log(`Language update to: ${newLang}`);
};

function displaySettings() {     // function declaration
  console.log(`Current theme: ${theme}`);
  console.log(`Current lang: ${lang}`);
  console.log(`Maximum Notifications: ${maxNotification}`);
}

updateLanguage("en");
updateSettingsSystem("light");
displaySettings();


// *var:
//    - имеет функциональную область видимости, то есть переменная доступна во всей функции а не за ее пределами.
//    - если var используется вне функции, переменная имеет глобальную область видимости
//    - также иммет поднятие - означает что переменую можно вызывать до ее фактического объявления в коде
//    - в одной области видимости можно повторно объявлять переменные с использованием var
//    - изменена в любой момент после ее объявления.


// *let:
//    - имеет блочную область видимости - переменная доступна только внутри блока, в котором она была объявлена.
//    - также имеет поднятие, но не инициализируются. Поэтому доступ к ним до строки объявления вызывает ошибку ReferenceError
//    - в одной области видимости нельзя повторно объявлять переменные с использованием let. Попытка повторного объявления в той же области видимости вызовет ошибку.
//    - изменена в любой момент после ее объявления.


// *const:
//    - const имеет блочную область видимости, как и let. const доступна только внутри блока, в котором она была объявлена.
//    - также поднимаются, но доступ к ним до строки объявления вызовет ошибку ReferenceError. const не могут быть инициализированы позже.
//    - в одной области видимости нельзя повторно объявлять const. Попытка повторного объявления вызовет ошибку.
//    - значение const не может быть изменено после первоначального присвоения.


// function declaration:
//     - имеют область видимости, соответствующую функции или глобальному контексту, если они объявлены на глобальном уровне.
//     - функции объявленные таким способом поднимаются полностью. Это означает, что функцию можно вызывать до ее фактического объявления в коде.
//     - функция объявляется с использованием ключевого слова function, за которым следует имя функции.


// function expression
//     - также имеют область видимости, соответствующую функции или блоку, где они определены.
//     - функции, объявленные как Function Expression, не поднимаются. Они доступны только после строки их объявления.
//     - функция присваивается переменной. Обычно она не имеет имени, хотя и есть возможность создать именованные function expressions.
